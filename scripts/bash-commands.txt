GPU0-------------------------------
CUDA_VISIBLE_DEVICES=0; python optimize_hypers.py nmn; CUDA_VISIBLE_DEVICES=0; python optimize_hypers.py encoder;

GPU1-------------------------------
CUDA_VISIBLE_DEVICES=1; python optimize_hypers.py find; rm -rf cache/train2014; rm -rf cache/val2014; CUDA_VISIBLE_DEVICES=1; python generate_cache.py hyperopt/find/find-hpo-best.pt --dataset train2014; CUDA_VISIBLE_DEVICES=1; python generate_cache.py hyperopt/find/find-hpo-best.pt --dataset val2014; CUDA_VISIBLE_DEVICES=1; python optimize_hypers.py describe; CUDA_VISIBLE_DEVICES=1; python optimize_hypers.py measure

CORRELATION-GRAPH------------------
# Take random hyperparams, train Find for N epochs and then train n2n til completion.
# Take best NMN hyperparams for end-2-end training.

# 1st run this
for i in {1..50}; do python train.py find --save --suffix "$i" --random-hypers; done

# Start this after 1st Find is trained
for i in {1..50}; do pythoon train.py nmn --find-pt "find-$i.pt" --best-hypers; done

# Transfer learning of Find module to NMN, freezing Find's weights.
for i in {1..16}; do CUDA_VISIBLE_DEVICES=0; python train_corr.py nmn --max-epochs 20 --validate --batch-size 512 --learning-rate 0.00055 --dropout 0 --weight-decay 1e-05; done

